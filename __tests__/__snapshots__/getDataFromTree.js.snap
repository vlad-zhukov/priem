// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getDataFromTree() should fetch and render to string with data 1`] = `
Object {
  "unique-key-1": Object {
    "meta": Object {
      "ssr": true,
      "ssrKey": "unique-key-1",
    },
    "state": Object {
      "fulfilled": true,
      "pending": false,
      "reason": null,
      "refresh": [Function],
      "refreshing": false,
      "rejected": false,
      "value": "foo",
    },
  },
}
`;

exports[`getDataFromTree() should fetch data from a nested component 1`] = `
Object {
  "unique-key-1": Object {
    "meta": Object {
      "ssr": true,
      "ssrKey": "unique-key-1",
    },
    "state": Object {
      "counter": 2,
    },
  },
  "unique-key-2": Object {
    "meta": Object {
      "ssr": true,
      "ssrKey": "unique-key-2",
    },
    "state": Object {
      "fulfilled": true,
      "pending": false,
      "reason": null,
      "refresh": [Function],
      "refreshing": false,
      "rejected": false,
      "value": "2-foo",
    },
  },
  "unique-key-3": Object {
    "meta": Object {
      "ssr": true,
      "ssrKey": "unique-key-3",
    },
    "state": Object {
      "fulfilled": true,
      "pending": false,
      "reason": null,
      "refresh": [Function],
      "refreshing": false,
      "rejected": false,
      "value": "2-foobar",
    },
  },
}
`;

exports[`getDataFromTree() should rehydrate data from initial store 1`] = `
Object {
  "unique-key-1": Object {
    "meta": Object {
      "ssr": true,
      "ssrKey": "unique-key-1",
    },
    "state": Object {
      "counter": 2,
    },
  },
  "unique-key-2": Object {
    "meta": Object {
      "ssr": true,
      "ssrKey": "unique-key-2",
    },
    "state": Object {
      "fulfilled": true,
      "pending": false,
      "reason": null,
      "refresh": [Function],
      "refreshing": false,
      "rejected": false,
      "value": "2-foo",
    },
  },
  "unique-key-3": Object {
    "meta": Object {
      "ssr": true,
      "ssrKey": "unique-key-3",
    },
    "state": Object {
      "fulfilled": true,
      "pending": false,
      "reason": null,
      "refresh": [Function],
      "refreshing": false,
      "rejected": false,
      "value": "2-foobar",
    },
  },
}
`;
